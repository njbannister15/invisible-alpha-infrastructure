{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Sets up rancher HOSTS in an autoscaling group, requires rancher master to be running.",
  "Mappings": {
    "AWSInstanceType2Arch": {
      "t2.nano": {
        "Arch": "HVM64"
      },
      "t2.micro": {
        "Arch": "HVM64"
      },
      "t2.small": {
        "Arch": "HVM64"
      },
      "t2.medium": {
        "Arch": "HVM64"
      },
      "m3.medium": {
        "Arch": "HVM64"
      },
      "m3.large": {
        "Arch": "HVM64"
      },
      "m3.xlarge": {
        "Arch": "HVM64"
      },
      "m3.2xlarge": {
        "Arch": "HVM64"
      },
      "m4.large": {
        "Arch": "HVM64"
      }
    },
    "AWSRegionArch2AMI": {
      "ap-northeast-1": {
        "HVM64": "ami-afb09dc8"
      },
      "ap-northeast-2": {
        "HVM64": "ami-66e33108"
      },
      "ap-south-1": {
        "HVM64": "ami-c2ee9dad"
      },
      "ap-southeast-1": {
        "HVM64": "ami-8fcc75ec"
      },
      "ap-southeast-2": {
        "HVM64": "ami-96666ff5"
      },
      "ca-central-1": {
        "HVM64": "ami-b3d965d7"
      },
      "cn-north-1": {
        "HVM64": "ami-a163b4cc"
      },
      "eu-central-1": {
        "HVM64": "ami-060cde69"
      },
      "eu-west-1": {
        "HVM64": "ami-a8d2d7ce"
      },
      "eu-west-2": {
        "HVM64": "ami-f1d7c395"
      },
      "sa-east-1": {
        "HVM64": "ami-4090f22c"
      },
      "us-east-1": {
        "HVM64": "ami-80861296"
      },
      "us-east-2": {
        "HVM64": "ami-618fab04"
      },
      "us-gov-west-1": {
        "HVM64": "ami-ff22a79e"
      },
      "us-west-1": {
        "HVM64": "ami-2afbde4a"
      },
      "us-west-2": {
        "HVM64": "ami-efd0428f"
      }
    }
  },
  "Parameters": {
    "EnvironmentTag": {
      "Type": "String",
      "Default": "Production",
      "MinLength": "3",
      "MaxLength": "12",
      "AllowedPattern": "^[a-zA-Z]+$",
      "Description": "Enter the Name for the environment, this is used in tagging"
    },
    "Info": {
      "Type": "String",
      "Default": "Production",
      "MinLength": "3",
      "MaxLength": "12",
      "AllowedPattern": "^[a-zA-Z]+$",
      "Description": "informational label for cattle host"
    },
    "VPCId": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "The VPC To deploy into"
    },
    "Subnets": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "The List of subnets "
    },
    "ServerInstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "AllowedValues": [
        "t2.micro",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge"
      ],
      "Description": "Enter the Name for the 7mb environment."
    },
    "RancherRegistrationScriptUrl": {
      "Type": "String",
      "Description": "eg. https://rancher.dashboardalpha.com/v1/scripts/0F099AD33B5B7EB403D5:1483142400000:B2v45UdsFAXp4ML8Uen9BT3fdk"
    },
    "LoginKeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Enter the name of an existing key pair to use in this template."
    }
  },
  "Resources": {
    "RancherInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for the Rancher Instance layer.",
        "VpcId": {
          "Ref": "VPCId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "icmp",
            "FromPort": "-1",
            "ToPort": "-1",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8443",
            "ToPort": "8443",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "9345",
            "ToPort": "9345",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "SecurityGroupEgress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ],
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvironmentTag"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentTag}.SG.Rancher"
            }
          }
        ]
      }
    },
    "CPUAlarmHigh": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": "75",
        "AlarmDescription": "Alarm if CPU too high or metric disappears indicating instance is down",
        "Period": "60",
        "AlarmActions": [
          {
            "Ref": "ScaleUpPolicy"
          }
        ],
        "Namespace": "AWS/EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoscalingGroup"
            }
          }
        ],
        "ComparisonOperator": "GreaterThanThreshold",
        "MetricName": "CPUUtilization"
      }
    },
    "CPUAlarmLow": {
      "Type": "AWS::CloudWatch::Alarm",
      "Properties": {
        "EvaluationPeriods": "1",
        "Statistic": "Average",
        "Threshold": "40",
        "AlarmDescription": "Alarm if CPU too low",
        "Period": "60",
        "AlarmActions": [
          {
            "Ref": "ScaleDownPolicy"
          }
        ],
        "Namespace": "AWS/EC2",
        "Dimensions": [
          {
            "Name": "AutoScalingGroupName",
            "Value": {
              "Ref": "AutoscalingGroup"
            }
          }
        ],
        "ComparisonOperator": "LessThanThreshold",
        "MetricName": "CPUUtilization"
      }
    },
    "ScaleUpPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoscalingGroup"
        },
        "EstimatedInstanceWarmup": "60",
        "PolicyType": "StepScaling",
        "StepAdjustments": [
          {
            "MetricIntervalLowerBound": 0,
            "MetricIntervalUpperBound": 20,
            "ScalingAdjustment": "1"
          },
          {
            "MetricIntervalLowerBound": 20,
            "ScalingAdjustment": "2"
          }
        ]
      }
    },
    "ScaleDownPolicy": {
      "Type": "AWS::AutoScaling::ScalingPolicy",
      "Properties": {
        "AdjustmentType": "ChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "AutoscalingGroup"
        },
        "EstimatedInstanceWarmup": "60",
        "PolicyType": "StepScaling",
        "StepAdjustments": [
          {
            "MetricIntervalLowerBound": -20,
            "MetricIntervalUpperBound": 0,
            "ScalingAdjustment": "-1"
          },
          {
            "MetricIntervalUpperBound": -20,
            "ScalingAdjustment": "-2"
          }
        ]
      }
    },
    "LaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "configSets": {
            "Install": [
              "Setup",
              "AptRepos",
              "Docker",
              "Register"
            ]
          },
          "Setup": {
            "packages": {
              "apt": {
                "apt-transport-https": [],
                "ca-certificates": [],
                "curl": [],
                "software-properties-common": [],
                "build-essential": [],
                "openjdk-8-jre-headless": [],
                "emacs": [],
                "authbind": [],
                "python-pip": [],
                "git-all": []
              }
            }
          },
          "AptRepos": {
            "commands": {
              "a_docker_GPG_key": {
                "command": "curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -"
              },
              "b_verify_docker_GPG_key": {
                "command": "apt-key fingerprint 0EBFCD88"
              },
              "c_docker_repo": {
                "command": "add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable'"
              },
              "f_apt_update": {
                "command": "apt-get update -y"
              }
            }
          },
          "Docker": {
            "packages": {
              "apt": {
                "docker-ce": [
                  "17.06.0~ce-0~ubuntu"
                ]
              }
            },
            "commands": {
              "c_usermod_ubuntu": {
                "command": "usermod -aG docker,ubuntu ubuntu"
              }
            }
          },
          "Register": {
            "commands": {
              "a_register_instance": {
                "command": {
                  "Fn::Sub": "docker run -e CATTLE_HOST_LABELS='info=${Info}' -d --privileged -v /var/run/docker.sock:/var/run/docker.sock -v /var/lib/rancher:/var/lib/rancher rancher/agent:v1.2.5 ${RancherRegistrationScriptUrl}"
                }
              }
            }
          }
        }
      },
      "Properties": {
        "AssociatePublicIpAddress": "true",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {
                  "Ref": "ServerInstanceType"
                },
                "Arch"
              ]
            }
          ]
        },
        "KeyName": {
          "Ref": "LoginKeyName"
        },
        "InstanceType": {
          "Ref": "ServerInstanceType"
        },
        "SecurityGroups": [
          {
            "Ref": "RancherInstanceSecurityGroup"
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -ex\n",
                "apt-get update\n",
                "apt-get -y install python-setuptools\n",
                "mkdir aws-cfn-bootstrap-latest\n",
                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                "easy_install aws-cfn-bootstrap-latest\n",
                "/usr/local/bin/cfn-init ",
                "          --verbose",
                "          --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "          --configsets Install ",
                "          --resource LaunchConfiguration",
                "          --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n",
                "\n",
                "/usr/local/bin/cfn-signal -e $? ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource LaunchConfiguration ",
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "\n"
              ]
            ]
          }
        }
      }
    },
    "AutoscalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": {
          "Ref": "Subnets"
        },
        "Cooldown": "60",
        "MinSize": "1",
        "DesiredCapacity": "1",
        "MaxSize": "5",
        "MetricsCollection": [
          {
            "Granularity": "1Minute"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "LaunchConfiguration"
        },
        "Tags": [
          {
            "Key": "Environment",
            "Value": {
              "Ref": "EnvironmentTag"
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                ".",
                [
                  {
                    "Fn::Sub": "${EnvironmentTag}.Rancher"
                  },
                  {
                    "Ref": "AWS::StackName"
                  },
                  "host-machine"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          }
        ]
      }
    }
  }
}